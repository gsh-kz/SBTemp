
plugins {
  id "java"
  id "idea"
  id "eclipse"
  id "checkstyle"
  id "pmd"
  id "jacoco"
  id "com.github.spotbugs" version "3.0.0"
  id "org.springframework.boot" version "${springBootVersion}"
  id "io.spring.dependency-management" version "${dependencyManagementVersion}"
  id "io.franzbecker.gradle-lombok" version "3.2.0"
}

repositories {
  jcenter()
  mavenCentral()
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-devtools"

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude(group: 'org.junit.vintage')
  }
}

checkstyle {
  toolVersion "${checkstyleVersion}"
  ignoreFailures true
  configFile file("${rootDir}/config/checkstyle/google_checks.xml")
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled false
    html.enabled true
  }
}

pmd {
  toolVersion "${pmdVersion}"
  ignoreFailures true
  ruleSets = [
    'java-basic',            // good practices which should be followed
    'java-braces',           // regarding the use and placement of braces
//    'java-clone',            // questionable usages of the clone() method
//    'java-codesize',         // problems related to code size or complexity
//    'java-design',           // flag suboptimal code implementations
//    'java-empty',            // empty statements of any kind
//    'java-finalizers',       // problems that can occur with finalizers
//    'java-imports',          // problems that can occur with import statements
//    'java-strictexception',  // strict guidelines about throwing and catching exceptions
//    'java-strings',          // manipulation of the String, StringBuffer, or StringBuilder instances
//    'java-sunsecure',        // check the security guidelines from Sun
//    'java-typeresolution',   // rules which resolve java Class files for comparison
//    'java-unnecessary',      // find useless or unnecessary code
//    'java-unusedcode'        // find unused or ineffective code
  ]
}

spotbugs {
  toolVersion "${spotbugsVersion}"
  ignoreFailures true
  reportsDir file("${buildDir}/reports/spotbugs")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled false
    html.enabled true
  }
}

jacoco {
  toolVersion "${jacocoVersion}"
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.destination file("${buildDir}/reports/jacoco")
  }
}

lombok {
  version "${lombokVersion}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding
tasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding

idea.module.inheritOutputDirs = true
